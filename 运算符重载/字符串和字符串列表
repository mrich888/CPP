字符串类:
    字符串 char *s //  std :: string s
    大小  size
    容量  capacity

1、字符串构造
    无参构造:StdMyString s  初始化各个成员 -- 大小置0  容量自定义  为字符串分配空间
    有参构造:StdMyString s("zhangsan")  
        根据参数初始化 -- 大小置为strlen  容量自定义(若自定义的过小,扩容置为strlen) 字符串分配空间并copy
        
2、拷贝构造 
    自定义拷贝函数, 将传进来的全都给我自己this --- 完成深拷贝 ---使用引用std :: string& str 避免重复开辟空间
    系统自动生成,  会发生浅拷贝

3、运算符重载  字符串追加cat 字符串复制cpy 比较大小cmp  查询子串strstr   相减  自减  
    +:使用引用传参数  使用字符串拼接,长度会发生变化,若新字符串超过了容量需扩容,但别忘了释放之前的容量
    =:自定义拷贝
    +=:使用已经重载的 + =, 返回的是引用
    
    -:找到要删除的子串的首位置 -- strstr(s1, s2) 然后循环删除，从这删到加上子串长度的位置  注意:相同的子串可能不止一个,需要循环找循环删除
    -=:

    ==  !=  >   <   =:strcmp
    不做考虑:  &&  ||:

4、将int类型以字符串形式输出 
    sprintf && printf : 用于将格式化的数据写进字符串中, 但不是将输出打印到标准的输出流中

5、[]重载
    []:在这里只是使用[]找到这个位置的字符,不要理解成直接替换哦
    要想实现某个字符串的替换,再使用重载 =
    不要忘记检验位置的合法性


6、强转类型
    int: atoi
    double: atof

7、字符串切割
    使用引用传入参数，

8、输入输出函数
    在类内声明友元,以达到可以访问类内私有成员(为什么要有这个重载,是因为想要单独打印类内的私有成员)


字符串列表:
1、构造函数:一样的
2、拷贝函数:
3、字符串列表追加:
4、删除一个指定位置的字符串
    后面覆盖前面,要注意先判断位置是否合法,减完之后记得size--
5、删除指定的字符串
    从头到尾遍历去寻找这个字符串,找到之后利用指定位置删除删除该字符串
    注意指定的字符串不一定只存在一个,需要一直找到尾遇到一个删一个
    在删除当前位置的字符串后,新字符串会覆盖至当前位置,为避免检查不到当前位置的系字符串,需要做idx--,从当前位置继续检查



⭐什么时候使用引用,什么时候使用对象

⭐什么时候返回引用,什么时候返回对象