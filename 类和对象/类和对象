基于函数编程 : 面向对象和面向过程

面向对象编程：考虑完成操作需要哪些对象
    1、对属性关闭,对方法开放
    2、指针成员在构造函数中申请, 在析构函数中释放  避免内存泄漏
    3、类中有指针成员,要写拷贝函数和赋值运算符重载的深度拷贝  保证指针安全
    4、对扩展开放,对修改关闭

⭐浅拷贝
    1、发生在系统自定义的拷贝函数中
    2、发生在系统自定义的运算符重载函数中

⭐class类 定义对象
    1、struct 和 class : 
        ·默认的访问权限不一样,前者默认公有public,后人默认私有private
        ·public:共有权限，类内和类外都可以访问
        ·private:私有权限,只能在类内使用
    2、函数应在类内声明,类外定义（自动生成）   类外定义需要带上类名＋域解析符说明函数的出处

⭐ 构造函数： 用于初始化对象状态的函数
    特点：不需要手动调用
    1、当不定义构造函数时,编译器会自动创建一个默认的构造函数
    2、当自定义构造函数时,编译去就不会在进行创建一个默认的构造函数了
    3、函数名和类名相同,无返回值
    4、所有的类在执行时都会调用构造函数
    5、构造函数可以重载

⭐ 拷贝构造函数
    1、函数名和类名相同,无返回值,参数必须得是对象得引用
    2、浅拷贝:当类中含有指针属性时,如果调用拷贝构造,拷贝的指针的值,
       也就使得两个对象的指针指向同一个块内存，析构中释放时发生二次释放
    3、深拷贝:内存赋值

⭐ 赋值运算符的重载函数  默认生成

⭐ 析构函数
    1、不需要手动调用,在对象的生命周期结束时会自动调用析构函数
    2、函数的形式:函数名和类名相同,在名称前加一个~  
    3、析构函数没有参数
    4、析构函数不能重载

⭐ RVO优化:return value optimizer :返回值优化
    左值一定拷贝

⭐ new && malloc
    1、malloc free是函数   new delete 是关键字
    2、new不需要计算内存大小 不需要转换指针 不需要判断指针是否为空（因为异常检测，终止程序）
    3、new delete 会调用构造和析构函数, 而malloc 不会调用构造和析构函数
    4、在delete自定义类型的时候, 必须要加[]    delete []t

⭐ explicit:防止隐式转换

⭐ const 初始化列表
    1、常成员变量必须在初始化列表中进行初始化
    2、普通成员变量也可以在初始化列表中进程初始化
    3、初始化列表的操作会快于构造函数的主体,只用在构造函数中
    4、减少构造函数中变量值未定义的情况,而不是将其默认初始化为0。

⭐ static
    C语言中: 
        1、局部变量:延长生命周期,只初始化一次  
        2、全局变量:只在当前文件可见  extern:来自其他文件
    C++中：  共享
        1、修饰成员变量:该变量不属于某一个类的成员(对象),而属于类,由该类的所有成员共享
        注意事项:初始化不由类的对象完成,而是由类本身自己完成
        2、修饰成员函数:该函数不属于成员,而是由所有成员共享
        静态成员函数不能访问普通类的成员变量， 只能访问静态成员变量 (共享访问共享, 不能跟私有挂钩 -- 因为this是属于对象的)

⭐ 关键字只需要在声明和默认参数的时候加，不需要再类也就是定义的时候外加

⭐ 单例:全局该类只有一个对象的设计模式
    1、防止对象在外部创建 (防止构造函数在外部被构造 -- 私有化)
    2、构建一个静态接口给外部使用
    3、在静态接口中构建static变量,返回该变量的指针

⭐ this指针: 指向本类对象
    1、*this获取本对象
    2、用于区分类成员和形参
    3、静态函数不能使用this指针 因为静态函数不独属某个对象，也就是没有内存空间

⭐ friend 友元关键字  
    1、被friend修饰的函数叫友元函数,可以访问类的私有成员
    2、被friend修饰的类叫友元类,该类可以访问类中的私有成员
    3、友元不能传递且是单项的

⭐ const对成员函数的修饰:
    1、const int* func  //保护返回值(int *)
    2、const func2(const int &a)  //保护传入的引用参数
    3、const func3() const //保护成员函数，在该函数内不允许对成员变量做修改

