设计模式：广泛知晓和使用的可靠模板代码

设计模式的原则：
1.开放封闭原则 --- 对扩展开放，对修改封闭
2.依赖倒置原则 --- 不要对具体的子类依赖，要依赖抽象类
3.接口隔离原则 --- 一个类对另外一个类的依赖要建立在最小的接口上
4.里氏替换原则 --- 用基类的地方就一定能用子类替换
5.单一职责原则 ---  一个类型只负责一个功能
6.迪米特原则  --- 减少类和类之间的耦合


创建型模式：思考构建对象的过程
结构型模型：思考类和类之间的关系
行为型模式：思考类和类的协同工作

创建型模式：思考类和类之间的关系
1.单例：一个类只能创建一个对象
懒汉式：对象在需要时创建 -- 不安全
饿汉式：对象在初始化创建 -- 不灵活



结构型模式:
1.适配器模式
 类适配器
 对象适配器

2.装饰模式:在不修改原类得基础上,添加新的功能
 组成： 抽象产品
 具体产品 抽象装饰 具体装饰

优点：产品和修饰阔扎不需要修改原类
缺点：类变多 结构复杂不易读

3.代理模式:保护被代理的类,降低被代理类和其他类的耦合
    保护被代理类，降低被代理

4.桥接模式:将一个事物的变换拆解两个维度，再将两个维度组合起来
优点：显著的提高代码的复用性，将复杂类在两个维度上进行解耦
缺点:类变多,结构变复杂

5.享元模式：共享对象
对象中共性的部分：内部状态 -- 抽离
非共性部分:外部状态

优点：减少对象的创建,减少内存,提高程序效率
缺点:扩展性较差

6.外观模式：联合多个不相干的类，其目的是简化接口
优点:简化对外接口
缺点:加入新的模块一定会修改外观类

⭐行为型模式：
    模板方法模式：定义一套工作流程，具体的实现由子类实现
    优点：易于扩展，保证接口统一
    缺点：类变多

    策略模式:解决一个问题有多种方式
    优点:能将接口不同变为对象不同，扩展性增强

    观察者模式:建立一对多的关系  当一产生变化 多给予反馈

    中介者模式:构建一个类去将两个类连接起来进行通信
    优点:解耦

    责任链模式:请求和客户端之间解耦
    能处理请求得类自成一条责任链
    优点:请求和客户端之前解耦
    缺点:当链条逻辑发生变化,一定会修改代码

    


外观和模板 : 
    外观:功能定，方式未定
    模板:流程定，内容未定

中介者和代理：
    中介者：多对多
    代理：一对多

中介者和桥接:
    中介者:解决两个不相关的类通讯
    桥接:将一个事物拆开,解决代码复用问题
    也是行为型和结构型的本质区别





为什么解耦:提高复用性,减少代码的修改,提高可扩展性
