

c++:升级

⭐ 名称控制：
    1、:: : 域解析符
    2、namespace 命名空间
    3、using 声明后面的符号可用
    4、std:C标准的命名空间


⭐ 更严格的类型控制

    最小的字节是bite

    bool: 布尔类型 判断真假 赋非0值都是1

⭐运算符的加强
    三目运算符的加强 ? :  
    C语言 返回的是值而不是地址空间
    C++ 返回的是地址空间也就是变量本身

⭐ 关键字加强
    指针常量：指针是一个常量 int * const p = &a
    常量指针：指针指向一个常量 int const int *p = &a
    
    1、const:
        c++中不可以通过指针修改 (即使地址改变了,但是由于有关键字限制,显示还是原来的值 --- 真常量)
        由于c++中对define无约束力,所以推荐使用const 来约束,以达到c语言中define的效果 (常量效果)

⭐ struct加强
    结构体本身的名字就作为类型,不需要typedef
    内部可以定义函数

⭐ 指针加强
    1、变量名:
    2、指针:内存的地址空间
    3、引用:内存的别名
        本质：指针常量 int &b = a; ==  int *const b = &a; (编译阶段会改变)
        注意事项：①要再定义时进行初始化 ②初始化以后不再改变朝向 ③本质时指针常量，编译期替换 ④ sizeof引用的就是sizeof原变量的地址

⭐ 左值和右值
    左值：有内存空间的值
    右值：没有内存的值
    const int &a:常量引用,解决右值没有办法传递给左值引用的问题,减少内存拷贝

⭐ 函数加强
    1、内联函数
    内联规则：①不要有循环 ②不能有太多的条件分支 ③不能取函数地址 ④总之不能太复杂，复杂的话就算你写也不能变成内联函数
    2、默认参数
        ①函数声明的时候添加默认参数
        ②默认参数必须放在参数列表的末尾
        ③默认参数的后面全部都是默认参数
    3、函数重载(多态) ：函数名相同,函数的定义不一样
        ①参数类型不一样
        ②参数数量不一样   默认参数不可以,但占位参数可以
        ③参数顺序不一样

⭐ c和c++联合编译
    extern "C" :以C语言的函数命名方式进行编译 (用extern "C" 包含所有函数接口)
    #define
    #ifdef __cplusplus
    extern "C"
    {
    #endif
        接口。。。。
    #ifdef __cplusplus
    } 
    #endif

⭐ c++内存管理
    c语言的内存管理(堆空间):malloc free 
    c++:new delete 堆内存空间 
        new[] delete []s; 释放数组
        new() delete s; 释放s值  //简单数据类型时可以直接使用这个delete s

